# Assistant Instructions

## Documentation Maintenance

*   **Reference:** Use the markdown files within the `docs/` directory (`requirements.md`, `dependencies.md`, `architecture.md`) as a knowledge base and source of truth for project requirements, dependency choices, and architectural decisions.
*   **Update:** When new decisions are made, requirements change, libraries are added/removed, or architectural patterns evolve, **proactively update** the relevant file(s) in the `docs/` directory to reflect the latest state. Ensure the documentation remains accurate and current.

## Guidelines for Code Changes & Testing

When implementing changes, adhere to the following testing procedures:

*   **New Functionality:**
    *   Implement unit tests covering all new code units (functions, components, classes).
    *   Implement behavioral tests (e.g., using React Testing Library) that verify the end-to-end behavior of the new feature from a user interaction perspective.
    *   Ensure both unit and behavioral tests pass before considering the functionality complete.
*   **Bug Fixes:**
    *   Before fixing the bug, write a new test (unit or behavioral, whichever is most appropriate) that specifically targets and reproduces the bug. This test should initially fail.
    *   Implement the bug fix.
    *   Verify that the new test now passes, along with all existing tests.
*   **Modifying Existing Functionality:**
    *   Identify the existing behavioral and unit tests relevant to the functionality being changed.
    *   **First, modify the tests** to reflect the new requirements or behavior.
    *   Run the tests; they should now fail.
    *   Implement the code changes to the functionality.
    *   Verify that the modified tests (and all other existing tests) now pass.
*   **Refactoring:**
    *   Identify or create a behavioral test that covers the functionality being refactored. Ensure this test passes **before** starting the refactor.
    *   Perform the refactoring (e.g., extracting logic into a new unit).
    *   If new units are created (e.g., a new function or component), add unit tests for these extracted units.
    *   After the refactor, ensure the original behavioral test **still passes** without modification. Also ensure any new unit tests pass.

## Change Quality & Committing

*   **Atomicity:** Aim for small, focused, atomic changes. Each change (and subsequent commit) should represent a single logical unit of work.
*   **Quality Gates:** Before considering a change complete or proposing a commit, ensure it meets the following criteria:
    *   **Testing:** Passes all relevant unit and behavioral tests according to the guidelines above.
    *   **Linting:** Passes lint checks (`npx @biomejs/biome check .` or integrated editor linting).
    *   **Formatting:** Adheres to formatting standards (`npx @biomejs/biome check --apply .` or integrated editor formatting).
    *   **TypeScript Compilation:** Compiles successfully without TypeScript errors (`npx tsc --noEmit`).
*   **Committing:**
    *   Only changes that meet all the quality gates above should be committed.
    *   Write clear, descriptive commit messages summarizing the change, following these formatting guidelines:
        *   **Imperative Mood:** Use the imperative mood in the subject line (e.g., "Fix bug", "Add feature" instead of "Fixed bug", "Added feature").
        *   **Subject Line:** The first line should be a concise summary of the change (ideally 50 characters or less).
        *   **Body:** Separate the subject from the body with a blank line. Subsequent lines should explain the *what* and *why* of the change in more detail, including rationale, goals, and scope. Wrap the body at 72 characters.
        *   **Formatting:** Use Markdown for any formatted text (like bullet points or code snippets) within the commit message body.
    *   Do not commit changes that fail any of the quality gates.

## Refactoring Heuristics & Workflow

*   **Recognizing Refactoring Needs:** Regularly assess the codebase for potential refactoring opportunities. Consider refactoring when you observe:
    *   **Long Methods/Functions:** Functions or methods that are excessively long or try to do too many things.
    *   **Duplicated Code:** Identical or very similar code blocks appearing in multiple places.
    *   **Complex Conditionals:** Deeply nested or overly complex `if`/`else` or `switch` statements (high cyclomatic complexity).
    *   **Large Code Blocks for Single Values:** Significant chunks of logic dedicated solely to calculating or deriving a single value.
    *   **Primitive Obsession / Data Clumps:** Groups of simple variables (strings, numbers, booleans) that are frequently passed around together, often indicating a missing class or object structure.
    *   **Excessive Parameters:** Functions or methods requiring a very long list of parameters.
    *   **Feature Envy:** Methods that seem more interested in the data of another class/object than their own.
    *   **Shotgun Surgery:** A single change requiring small modifications in many different classes or functions.
*   **Post-Commit Review:** After committing a functional change or bug fix (that meets all quality gates), review the changed code and surrounding areas using the heuristics above.
*   **Separate Atomic Refactors:** If refactoring is deemed necessary:
    *   Perform the refactoring as a **separate, atomic commit** *after* the functional change commit.
    *   Ensure the refactoring adheres to the testing guidelines (behavioral tests pass before and after, unit tests added for new units).
    *   Ensure the refactoring commit itself passes all quality gates.

## TypeScript Code Style Guidelines

### Code Style and Structure

- **Code is for humans.** Write your code as though the next person to read it is an exhausted teammate at 3 a.m.—because one day, it will be.
- **Explain *why*, not *what*.** Use comments to describe rationale, trade-offs, and limitations. Avoid restating what the code already expresses. If necessary, explain *why not*.
- **Be concise, but not cryptic.** Strive for clarity over cleverness. Write maintainable, technically accurate TypeScript with inline documentation and usage examples where helpful.
- **Prefer composition and iteration.** Avoid duplication by modularising reusable logic and favouring `map`, `reduce`, or `for` loops over repeated structures.
- **Use expressive variable and function names.** Prefer names with auxiliary verbs or meaningful prefixes/suffixes (`isLoading`, `hasPermission`, `onSubmit`).
- **Organise code logically within files.** Group exports with related concerns (e.g., component + helpers + types). Each file should represent a single concept or cohesive module.
- **Group by feature, not type.** Prefer colocating components, styles, and logic that relate to a feature over centralising all components, all styles, etc.

### Naming Conventions

- **Directories:** Use *kebab-case* (e.g., `auth-wizard`, `user-profile`).
- **Files:** Use *kebab-case* for filenames; name files after what they export.
- **Components:** Use *PascalCase* for React component names.
- **Variables & Functions:** Use *camelCase* for all variables, functions, and non-component exports.
- **Export Style:** Prefer *named exports*. Use default exports only where the file exports a single primary item (e.g., a page component).
- **Constants:** Use *UPPER_SNAKE_CASE* for exported constants.
- **Types & Interfaces:** Use *PascalCase*.

### TypeScript Usage

- **Use TypeScript everywhere.** Avoid `.js` files unless there's a compelling reason.
- **Prefer `interface` over `type`** unless union or mapped types are required. Interfaces support declaration merging and are better suited for extending.
- **Always type props and state.** Don’t rely on implicit types for exported components.
- **Avoid `any`.** Use unknown, generics, or type assertions if necessary, but always justify use of `any`.
- **Use enums or constants instead of magic values.** Particularly for states, error codes, routes, and other domain concepts.

### React Best Practices

- **Use functional components.** Avoid class components.
- **Prefer hooks over HOCs.** Encapsulate logic with custom hooks (`useXyz`) instead of creating reusable HOCs.
- **Type hooks correctly.** For example, `useState<string | null>` is better than `useState()` and inferring.
- **Memoize expensive computations.** Use `useMemo` and `useCallback` responsibly.

### Tooling and Build

- **Vite Optimisation:** Implement chunking and code splitting where appropriate, especially for large dependencies or routes.
- **Avoid global side effects.** Modules should not mutate global state on import.
- **Use environment variables safely.** Never expose secrets; prefix with `VITE_` for public env vars.
- **Static assets and constants** should be imported from a single source-of-truth module or colocated with the feature they serve.

### Documentation

- **Document complex types and functions.** Use TSDoc-style comments for exported APIs or utilities.
- **Colocate examples with source.** If a component or function has non-obvious behaviour, provide minimal usage examples in comments or markdown files.

### Test Organisation

- **Colocate tests with source files** in a test sub-directory, using the `.test.ts` or `.test.tsx` suffix. This keeps tests near the code they verify, easing discoverability and maintenance.
  
    ```
    components/
      auth-wizard/
        tests/
          AuthWizard.test.tsx
          helpers.test.ts
        AuthWizard.tsx
        helpers.ts
    ```

- **Keep test files small and focused.** If a test grows too large or mixes concerns, break it up by moving more complex integration tests into a dedicated directory such as:

    ```
    tests/
      integration/
        AuthFlow.test.ts
        PaymentGateway.test.ts
    ```

- **Use `describe()` blocks** to group tests by logical unit or behaviour. Test names should express intent, not implementation.
  
    ```ts
    describe('AuthWizard', () => {
      it('renders the first step by default', () => {
        // ...
      });
  
      it('validates input before progressing', () => {
        // ...
      });
    });
    ```

- **Avoid over-mocking.** Prefer testing components and logic with as few mocks as possible—mocking should only replace APIs, browser APIs, or intentionally externalised dependencies.

- **Prefer real user behaviour over internal component state.** The more your tests resemble the way your software is used, the more confidence they can give you.

- **Use parameterized tests to run a single test case with different inputs and expected outputs.** This reduces code duplication and ensures that your functions behave correctly for various scenarios.

    ```ts
    describe.each([
      [1, 2, 3],
      [2, 3, 5],
      [5, 5, 10],
    ])('Math Operations', (a, b, expected) => {
      it(`should add ${a} and ${b} to equal ${expected}`, () => {
        expect(a + b).toBe(expected);
      });
    });
    ```
